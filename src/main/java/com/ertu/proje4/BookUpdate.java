/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.ertu.proje4;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.ParseException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author ergul
 */
public class BookUpdate extends javax.swing.JDialog {

    /**
     * Creates new form BookUpdate
     */
    public BookUpdate(java.awt.Frame parent, boolean modal, String name, String author, String category, String publisher,
            int edition, String isbn, String date, String uuid) {
        super(parent, modal);
        // Store the book's uuid and initialize the isbn and due date's MaskFormatter
        this.book_uuid = uuid;
        try {
            isbn_formatter = new MaskFormatter("#############");
            isbn_formatter.setPlaceholderCharacter('_');
        } catch (ParseException e) {
            e.printStackTrace();
        }
        try {
            date_formatter = new MaskFormatter("##/##/####");
            date_formatter.setPlaceholderCharacter('_');
        } catch (ParseException e) {
            e.printStackTrace();
        }
        initComponents();
        // Set the fields' initial texts and values
        nameTF.setText(name);
        authorTF.setText(author);
        publisherTF.setText(publisher);
        isbnTF.setText(isbn);
        if (date != null) {
            dateTF.setText(date);
        } 
        categoryComBox.setSelectedItem(category);
        editionSpinner.setValue(edition);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        authorTF = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        isbnTF = new javax.swing.JFormattedTextField(isbn_formatter);
        jLabel4 = new javax.swing.JLabel();
        publisherTF = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        editionSpinner = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        categoryComBox = new javax.swing.JComboBox<>();
        nameTF = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        dateTF = new javax.swing.JFormattedTextField(date_formatter);
        returnChBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel3.setText("ISBN-13:");

        jLabel4.setText("Publisher:");

        jLabel5.setText("Edition:");

        editionSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jLabel6.setText("Category:");

        jLabel1.setText("Name:");

        categoryComBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Unselected", "Religion", "Science", "Engineering", "Arts", "Literature", "History", "Philosophy" }));

        addButton.setText("ADD");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Author:");

        jLabel7.setText("Due Date:");

        returnChBox.setText("Return");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 116, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                            .addComponent(nameTF, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(authorTF, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(isbnTF, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(publisherTF, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editionSpinner, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(categoryComBox, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dateTF, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(returnChBox, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(authorTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(isbnTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(publisherTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(editionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(dateTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(returnChBox))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoryComBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // This function is pretty much the same with other registration functions
    // The only difference is due date/availability update
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        boolean name_filled = !nameTF.getText().isBlank();
        boolean author_filled = !authorTF.getText().isBlank();
        boolean publisher_filled = !publisherTF.getText().isBlank();
        boolean isbn_filled = (isbnTF.getText().equals("_____________")) ? false : true;
        boolean date_filled = (dateTF.getText().equals("__/__/____")) ? false : true;
        boolean edition_selected = ((Integer)editionSpinner.getValue() == 0) ? false : true;
        boolean category_selected = ((String)categoryComBox.getSelectedItem()).equals("Unselected") ? false : true;

        boolean has_error = false;
        String error_message = "";

        if (!name_filled) {
            if (!has_error) has_error = true;
            error_message += "Enter the book's name.\n";
        }

        if (!author_filled) {
            if (!has_error) has_error = true;
            error_message += "Enter the book's author.\n";
        }

        if (!publisher_filled) {
            if (!has_error) has_error = true;
            error_message += "Enter the book's publisher.\n";
        }

        if (!isbn_filled) {
            if (!has_error) has_error = true;
            error_message += "Enter the book's ISBN code.\n";
        }
        
        if (!date_filled && !returnChBox.isSelected()) {
            if (!has_error) has_error = true;
            error_message += "Enter the book's due date if you won't return it.\n";
        }

        if (!edition_selected) {
            if (!has_error) has_error = true;
            error_message += "Fill the book's edition.\n";
        }

        if (!category_selected) {
            if (!has_error) has_error = true;
            error_message += "Select the book's category.\n";
        }

        if (has_error) {
            JOptionPane.showMessageDialog(this, error_message, "Error!", JOptionPane.ERROR_MESSAGE);
        } else {
            String book_name = nameTF.getText();
            String book_author = authorTF.getText();
            String book_publisher = publisherTF.getText();
            String book_isbn = isbnTF.getText();
            String book_category = (String) categoryComBox.getSelectedItem();
            Integer book_edition = (Integer) editionSpinner.getValue();
            LocalDate book_due_date;
            // If the "Return" check box is not ticked, set the date entered
            if (!returnChBox.isSelected()) {
                String book_due_date_str = dateTF.getText();
                DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                book_due_date = LocalDate.parse(book_due_date_str, dateFormatter);
            } else {
                // Else, set the due date to null
                book_due_date = null;
            }

            // Record the update in the database
            try (Connection conn = DriverManager.getConnection(DBCredentials.db_url, DBCredentials.db_username,
                    DBCredentials.db_password)) {

                String query = "UPDATE books "
                        + "SET name = ?, author = ?, edition = ?, duedate = ?, category = ?, isbn = ?, publisher = ? "
                        + "WHERE uuid = ?";

                try (PreparedStatement statement = conn.prepareStatement(query)) {
                    statement.setString(1, book_name);
                    statement.setString(2, book_author);
                    statement.setInt(3, book_edition);
                    statement.setObject(4, book_due_date);
                    statement.setString(5, book_category);
                    statement.setString(6, book_isbn);
                    statement.setString(7, book_publisher);
                    statement.setString(8, book_uuid);

                    int result = statement.executeUpdate();
                    // Inform the user about success or failure
                    if (result > 0) {
                        JOptionPane.showMessageDialog(this, "Submitted book successfully.");
                        this.dispose();
                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to update the book. You might want to contact your sysadmin",
                                "Error!", JOptionPane.ERROR_MESSAGE);
                    }
                }
                
                // If the book is returned, remove the book from "borrows" table
                if (returnChBox.isSelected()) {
                    String borrow_query = "DELETE FROM borrows WHERE book_uuid = ?";

                    try (PreparedStatement borrow_stat = conn.prepareStatement(borrow_query)) {
                        borrow_stat.setString(1, book_uuid);
                        borrow_stat.executeUpdate();
                    }
                }
                
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(),
                            "Database error!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private MaskFormatter isbn_formatter;
    private MaskFormatter date_formatter;
    private String book_uuid;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextField authorTF;
    private javax.swing.JComboBox<String> categoryComBox;
    private javax.swing.JFormattedTextField dateTF;
    private javax.swing.JSpinner editionSpinner;
    private javax.swing.JFormattedTextField isbnTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField nameTF;
    private javax.swing.JTextField publisherTF;
    private javax.swing.JCheckBox returnChBox;
    // End of variables declaration//GEN-END:variables
}
