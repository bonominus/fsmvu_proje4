/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.ertu.proje4;

import java.nio.CharBuffer;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.ParseException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.UUID;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author ergul
 */
public class Register extends javax.swing.JDialog {

    /**
     * Creates new form Register
     *
     * @param parent
     * @param modal
     */
    public Register(java.awt.Frame parent, boolean modal, boolean admin) {
        super(parent, modal);
        // See if the user is to be registered as admin or not
        this.admin = admin;
        // Construct date formatter to be used for birthday input
        try {
            date_formatter = new MaskFormatter("##/##/####");
            date_formatter.setPlaceholderCharacter('_');
        } catch (ParseException e) {
            e.printStackTrace();
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderRBGroup = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        nameTF = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        emailTF = new javax.swing.JTextField();
        passwordPF = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        registerButton = new javax.swing.JButton();
        birthdayTF = new javax.swing.JFormattedTextField(date_formatter);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Full Name");

        jLabel2.setText("Email");

        jLabel3.setText("Password");

        jLabel4.setText("Birthday(DD/MM/YYYY)");

        registerButton.setText("Register");
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(registerButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(birthdayTF, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(emailTF, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(passwordPF, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(emailTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(birthdayTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(registerButton)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        // Check if the text fields are filled
        boolean name_filled = !nameTF.getText().isBlank();
        boolean email_filled = !emailTF.getText().isBlank();
        boolean password_filled = !isCharArrayEmpty(passwordPF.getPassword());

        boolean has_error = false;
        String error_message = "";
        if (!name_filled) {
            if (!has_error) has_error = true;
            error_message += "Fill your name in.\n";
        // Names should start with capital letters. This is enforced by following regex    
        } else if (!nameTF.getText().matches("(?:\\p{Lu}\\p{Ll}+\\s)+\\p{Lu}\\p{Ll}+")) {
            if (!has_error) has_error = true;
            error_message += "Name is in an invalid format(All names should be capitalized).\n";
        }
        
        if (!email_filled) {
            if (!has_error) has_error = true;
            error_message += "Fill your email in.\n";
        // Emails should be in standardized format. This is also enforced by a regex
        } else if (!emailTF.getText().matches("[a-zA-Z0-9_]+@[a-zA-Z]+(\\.com(\\.tr)?|\\.edu\\.tr|\\.fsm\\.edu\\.tr)")) {
            if (!has_error) has_error = true;
            error_message += "Email is in an invalid format.\n";
        }
        
        
        LocalDate user_birthday = null;
        // In case of incomplete input, JFormattedField returns the base string with placeholders and characters from MaskFormatter.
        if (birthdayTF.getText().equals("__/__/____")) {
            if (!has_error) has_error = true;
            error_message += "Fill your birthday in.\n";
        } else {
            // Birthday input is taken as day/month/year but Java and SQL store dates as year/month/day so a conversion
            // with DateTimeFormatter is needed. Here the years are taken and calculated to see if the registrant is 
            // eligible(at least 18 years old) 
            String user_birthday_str = birthdayTF.getText();
            DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            user_birthday = LocalDate.parse(user_birthday_str, dateFormatter);
            LocalDate today = LocalDate.now(ZoneId.of("Asia/Istanbul"));
            int age = today.getYear() - user_birthday.getYear();
            if (age < 18) {
                if (!has_error) has_error = true;
                error_message += "You have to be at least 18 years old to register.\n";
            }
        }
        
        if (!password_filled) {
            if (!has_error) has_error = true;
            error_message += "Enter a password.\n";
        // Passwords should be at least 8 characters long and contain at least one uppercase, one lowercase letter and a digit.
        // This is also enforced by a regex.
        } else if (!Pattern.matches("^((?=\\S*?[A-Z])(?=\\S*?[a-z])(?=\\S*?[0-9]).{7,})\\S$",
                CharBuffer.wrap(passwordPF.getPassword()))) {
            if (!has_error) has_error = true;
            error_message += "Password is invalid.(It should be have at least 8 characters and contain at least an uppercase letter, a lowercase letter and a digit.\n";
        }
        
        // If an error has occurred, inform the user. Otherwise, proceed as usual
        if (has_error) {
            JOptionPane.showMessageDialog(this, error_message, "Error!", JOptionPane.ERROR_MESSAGE);
        } else {
            // Retrieve text inputs and generate a unique identifier for the registrant
            String user_full_name = nameTF.getText();
            String user_email = emailTF.getText();
            char[] user_password = passwordPF.getPassword();
            String user_uuid = UUID.randomUUID().toString();
            
            try (Connection conn = DriverManager.getConnection(DBCredentials.db_url, DBCredentials.db_username, 
                DBCredentials.db_password)) {
                // Since this is a registration, all columns in the db is filled
                String insert_query = "INSERT INTO members (email, password, fullname, birthday, uuid, admin) "
                        + "VALUES (?, ?, ?, ?, ?, ?)";
                
                try (PreparedStatement statement = conn.prepareStatement(insert_query)) {
                    // Parameters are set
                    statement.setString(1, user_email);
                    statement.setString(2, String.valueOf(user_password));
                    statement.setString(3, user_full_name);
                    statement.setObject(4, user_birthday);
                    statement.setString(5, user_uuid);
                    
                    // Filling the "admin" column with given privileges
                    if (admin)
                        statement.setInt(6, 1);
                    else
                        statement.setInt(6, 0);
                    
                    // Execute the update and destruct the classes
                    statement.executeUpdate();
                    statement.close();
                    conn.close();
                    this.dispose();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(),
                            "Database error!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_registerButtonActionPerformed

    // This function is char[] equivalent for String::isBlank(). This is taken directly from Java's String class
    // except slight modifications to accomodate char[] type
    public static boolean isCharArrayEmpty(char[] value) {
        int length = value.length >> 1;
        int left = 0;
        while (left < length) {
            // Increase the "left" variable in case a whitespace character is spotted.
            int codepoint = Character.codePointAt(value, left, length);
            if (codepoint != ' ' && codepoint != '\t' && !Character.isWhitespace(codepoint)) {
                break;
            }
            left += Character.charCount(codepoint);
        }
        // If the "left" variable is equal to array's length, then it is increased for all items
        // which means all characters are whitespace, therefore the char array is blank
        return left == value.length;
    }

    private MaskFormatter date_formatter;
    private boolean admin;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField birthdayTF;
    private javax.swing.JTextField emailTF;
    private javax.swing.ButtonGroup genderRBGroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField nameTF;
    private javax.swing.JPasswordField passwordPF;
    private javax.swing.JButton registerButton;
    // End of variables declaration//GEN-END:variables
}
