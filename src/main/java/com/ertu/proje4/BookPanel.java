/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.ertu.proje4;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author ergul
 */
public class BookPanel extends javax.swing.JDialog {

    private String name_query = "";
    private String author_query = "";
    private String category_query = "";
    private String availability_query = "";
    private String edition_query = "";
    private String publisher_query = "";
    private String isbn_query = "";
    private DefaultTableModel model;
    private DateTimeFormatter date_formatter;
    private String user_uuid;

    /**
     * Creates new form BookPanel
     */
    public BookPanel(java.awt.Frame parent, boolean modal, String uuid) {
        // This class is very similar to BookManagement. In fact the only differences are the buttons that 
        // change based on logged account's privileges. Admin has "ADD", "UPDATE", "DELETE" and "REFRESH"
        // buttons while the user only has "BORROW" and "REFRESH" buttons
        super(parent, modal);
        initComponents();
        user_uuid = uuid;
        model = (DefaultTableModel)booksTable.getModel();
        date_formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        model.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                resizeCells();
            }
        });
        booksTable.getColumnModel().getColumn(6).setCellRenderer(new DueDateColumnRenderer());
        showBooks("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        authorTF = new javax.swing.JTextField();
        publisherTF = new javax.swing.JTextField();
        availableChBox = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        categoryCBox = new javax.swing.JComboBox<>();
        isbnTF = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        editionSpinner = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        booksTable = new javax.swing.JTable();
        nameTF = new javax.swing.JTextField();
        borrowButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel4.setText("Author:");

        jLabel5.setText("Publisher:");

        authorTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authorTFActionPerformed(evt);
            }
        });

        publisherTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publisherTFActionPerformed(evt);
            }
        });

        availableChBox.setText("Only Available");
        availableChBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                availableChBoxItemStateChanged(evt);
            }
        });

        jLabel6.setText("ISBN-13:");

        categoryCBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Unselected", "Religion", "Science", "Engineering", "Arts", "Literature", "History", "Philosophy" }));
        categoryCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryCBoxActionPerformed(evt);
            }
        });

        isbnTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isbnTFActionPerformed(evt);
            }
        });

        jLabel1.setText("Category:");

        jLabel2.setText("Edition:");

        editionSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        editionSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                editionSpinnerStateChanged(evt);
            }
        });

        jLabel3.setText("Name:");

        jPanel1.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        booksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Author", "ISBN-13", "Publisher", "Edition", "Category", "Availability", "UUID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        booksTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(booksTable);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        nameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTFActionPerformed(evt);
            }
        });

        borrowButton.setText("BORROW");
        borrowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrowButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("REFRESH");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(isbnTF)
                            .addComponent(publisherTF)
                            .addComponent(categoryCBox, 0, 190, Short.MAX_VALUE)
                            .addComponent(editionSpinner)
                            .addComponent(nameTF)
                            .addComponent(authorTF)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(availableChBox)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(borrowButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(refreshButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(nameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(authorTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(publisherTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(isbnTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(categoryCBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(editionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(availableChBox)
                        .addGap(18, 18, 18)
                        .addComponent(borrowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(refreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showBooks(String search) {
        model.setRowCount(0);
        try (Connection conn = DriverManager.getConnection(DBCredentials.db_url, DBCredentials.db_username,
                DBCredentials.db_password)) {
            String query = "SELECT * FROM books " + search;
            
            try (PreparedStatement statement = conn.prepareStatement(query)) {
                ResultSet result_set = statement.executeQuery();
                
                while (result_set.next()) {
                    String book_name = result_set.getString("name");
                    String book_author = result_set.getString("author");
                    String book_isbn = result_set.getString("isbn");
                    String book_publisher = result_set.getString("publisher");
                    int book_edition = result_set.getInt("edition");
                    String book_uuid = result_set.getString("uuid");
                    String book_category = result_set.getString("category");
                    
                    java.sql.Date book_date = result_set.getDate("duedate");
                    String book_date_str;
                    if (book_date != null) {    
                        LocalDate book_local_date = book_date.toLocalDate();
                        book_date_str = book_local_date.format(date_formatter);
                    } else {
                        book_date_str = "Available";
                    }
                    model.addRow(new Object[]{book_name, book_author, book_isbn, book_publisher, book_edition,
                                                book_category, book_date_str, book_uuid});
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                            "Database error!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void authorTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorTFActionPerformed
        if (!authorTF.getText().isBlank()) {
            author_query = " AND LOWER(author) LIKE CONCAT('%', LOWER('"
            + authorTF.getText().toLowerCase() + "'), '%')";
            showBooks("WHERE 1 = 1" + name_query + author_query + category_query + availability_query +
                edition_query + publisher_query + isbn_query);
        } else {
            author_query = "";
            showBooks("WHERE 1 = 1" + name_query + author_query + category_query + availability_query +
                edition_query + publisher_query + isbn_query);
        }
    }//GEN-LAST:event_authorTFActionPerformed

    private void publisherTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_publisherTFActionPerformed
        if (!publisherTF.getText().isBlank()) {
            publisher_query = " AND LOWER(publisher) LIKE CONCAT('%', LOWER('"
            + publisherTF.getText().toLowerCase() + "'), '%')";
            showBooks("WHERE 1 = 1" + name_query + author_query + category_query + availability_query +
                edition_query + publisher_query + isbn_query);
        } else {
            publisher_query = "";
            showBooks("WHERE 1 = 1" + name_query + author_query + category_query + availability_query +
                edition_query + publisher_query + isbn_query);
        }
    }//GEN-LAST:event_publisherTFActionPerformed

    private void availableChBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_availableChBoxItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            availability_query = " AND duedate IS NULL";
            showBooks("WHERE 1 = 1" + name_query + author_query + category_query + availability_query +
                edition_query + publisher_query + isbn_query);
        } else {
            availability_query = "";
            showBooks("WHERE 1 = 1" + name_query + author_query + category_query + availability_query +
                edition_query + publisher_query + isbn_query);
        }
    }//GEN-LAST:event_availableChBoxItemStateChanged

    private void categoryCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryCBoxActionPerformed
        String selected_value = (String)categoryCBox.getSelectedItem();
        if (!selected_value.equals("Unselected")) {
            category_query = " AND category = '"
            + selected_value + "'";
            showBooks("WHERE 1 = 1" + name_query + author_query + category_query + availability_query +
                edition_query + publisher_query + isbn_query);
        } else {
            category_query = "";
            showBooks("WHERE 1 = 1" + name_query + author_query + category_query + availability_query +
                edition_query + publisher_query + isbn_query);
        }
    }//GEN-LAST:event_categoryCBoxActionPerformed

    private void isbnTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isbnTFActionPerformed
        if (!isbnTF.getText().isBlank()) {
            isbn_query = " AND isbn LIKE CONCAT('%', '"
            + isbnTF.getText().toLowerCase() + "', '%')";
            showBooks("WHERE 1 = 1" + name_query + author_query + category_query + availability_query +
                edition_query + publisher_query + isbn_query);
        } else {
            isbn_query = "";
            showBooks("WHERE 1 = 1" + name_query + author_query + category_query + availability_query +
                edition_query + publisher_query + isbn_query);
        }
    }//GEN-LAST:event_isbnTFActionPerformed

    private void editionSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_editionSpinnerStateChanged
        Integer selected_value = (Integer)editionSpinner.getValue();
        if (selected_value != 0) {
            edition_query = " AND edition = "
            + selected_value;
            showBooks("WHERE 1 = 1" + name_query + author_query + category_query + availability_query +
                edition_query + publisher_query + isbn_query);
        } else {
            edition_query = "";
            showBooks("WHERE 1 = 1" + name_query + author_query + category_query + availability_query +
                edition_query + publisher_query + isbn_query);
        }
    }//GEN-LAST:event_editionSpinnerStateChanged

    private void nameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTFActionPerformed
        if (!nameTF.getText().isBlank()) {
            name_query = " AND LOWER(name) LIKE CONCAT('%', LOWER('"
            + nameTF.getText().toLowerCase() + "'), '%')";
            showBooks("WHERE 1 = 1" + name_query + author_query + category_query + availability_query +
                edition_query + publisher_query + isbn_query);
        } else {
            name_query = "";
            showBooks("WHERE 1 = 1" + name_query + author_query + category_query + availability_query +
                edition_query + publisher_query + isbn_query);
        }
    }//GEN-LAST:event_nameTFActionPerformed

    private void borrowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrowButtonActionPerformed
        int selected_row = booksTable.getSelectedRow();
        // If the user selected a valid book
        if (selected_row != -1) {
            String availability = (String)booksTable.getValueAt(selected_row, 6);
            // Check if the book is available
            if (availability.equals("Available")) {
                // If it is, then proceed by retrieving the book's unique id and giving the user 2 weeks
                String book_uuid = (String)booksTable.getValueAt(selected_row, 7);
                LocalDate book_due_date = LocalDate.now(ZoneId.of("Asia/Istanbul")).plusDays(14);
                
                try (Connection conn = DriverManager.getConnection(DBCredentials.db_url, DBCredentials.db_username,
                        DBCredentials.db_password)) {
                    // First query updates the book's due date with the given day
                    // Second query records that the user took this book
                    String book_query = "UPDATE books SET duedate = ? WHERE uuid = ?";
                    String borrow_query = "INSERT INTO borrows (book_uuid, user_uuid) "
                            + "VALUES (? , ?)";   
                    
                    int result1, result2;
                    try (PreparedStatement statement = conn.prepareStatement(book_query)) {
                        statement.setObject(1, book_due_date);
                        statement.setString(2, book_uuid);
                        
                        result1 = statement.executeUpdate();
                    }
                    
                    try (PreparedStatement statement = conn.prepareStatement(borrow_query)) {
                        statement.setString(1, book_uuid);
                        statement.setString(2, user_uuid);
                        
                        result2 = statement.executeUpdate();
                    }
                    
                    // Check if both queries succeeded
                    if (result1 > 0 && result2 > 0) {
                        JOptionPane.showMessageDialog(this, "Borrowed the book successfully");
                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to borrow the book.", "Error!",
                                JOptionPane.ERROR_MESSAGE);
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(),
                            "Database error!", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                String message = "That book is already taken.\nYou can use the checkbox to filter available ones.";
                JOptionPane.showMessageDialog(this, message, "Error",
                    JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Inform the user to select a book first
            JOptionPane.showMessageDialog(this, "Select a book first.", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_borrowButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        nameTF.setText("");
        authorTF.setText("");
        isbnTF.setText("");
        publisherTF.setText("");
        categoryCBox.setSelectedIndex(0);
        editionSpinner.setValue(0);
        showBooks("");
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void resizeCells() {
        for (int column = 0; column < booksTable.getColumnCount(); column++) {
            TableColumn table_column = booksTable.getColumnModel().getColumn(column);
            int preferred_width = 0;

            // Consider column header width
            int headerWidth = booksTable.getTableHeader().getDefaultRenderer()
                    .getTableCellRendererComponent(booksTable, table_column.getHeaderValue(), false, false, -1, column)
                    .getPreferredSize().width;
            preferred_width = Math.max(preferred_width, headerWidth);

            // Consider cell widths
            for (int row = 0; row < booksTable.getRowCount(); row++) {
                int cellWidth = booksTable.getFontMetrics(booksTable.getFont())
                        .stringWidth(booksTable.getValueAt(row, column).toString());
                preferred_width = Math.max(preferred_width, cellWidth);
            }

            table_column.setPreferredWidth(preferred_width + 10);
        }
    }
    
    private class DueDateColumnRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                boolean hasFocus, int row, int column) {
            Component component = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            // Set the font style to bold
            Font font = component.getFont();
            font = font.deriveFont(font.getStyle() | Font.BOLD);
            component.setFont(font);

            // Set different colors based on the cell value
            if (value != null) {
                String text = value.toString();
                if (text.equals("Available")) {
                    component.setForeground(Color.GREEN);
                } else {
                    component.setForeground(Color.RED);
                }
            }

            return component;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField authorTF;
    private javax.swing.JCheckBox availableChBox;
    private javax.swing.JTable booksTable;
    private javax.swing.JButton borrowButton;
    private javax.swing.JComboBox<String> categoryCBox;
    private javax.swing.JSpinner editionSpinner;
    private javax.swing.JFormattedTextField isbnTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameTF;
    private javax.swing.JTextField publisherTF;
    private javax.swing.JButton refreshButton;
    // End of variables declaration//GEN-END:variables
}
